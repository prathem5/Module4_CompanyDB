#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompanyManagementConsole
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Company_db")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComapny(Comapny instance);
    partial void UpdateComapny(Comapny instance);
    partial void DeleteComapny(Comapny instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeProjectMap(EmployeeProjectMap instance);
    partial void UpdateEmployeeProjectMap(EmployeeProjectMap instance);
    partial void DeleteEmployeeProjectMap(EmployeeProjectMap instance);
    partial void InsertTechnologyMaster(TechnologyMaster instance);
    partial void UpdateTechnologyMaster(TechnologyMaster instance);
    partial void DeleteTechnologyMaster(TechnologyMaster instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::CompanyManagementConsole.Properties.Settings.Default.Company_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comapny> Comapnies
		{
			get
			{
				return this.GetTable<Comapny>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeProjectMap> EmployeeProjectMaps
		{
			get
			{
				return this.GetTable<EmployeeProjectMap>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyMaster> TechnologyMasters
		{
			get
			{
				return this.GetTable<TechnologyMaster>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comapny")]
	public partial class Comapny : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _CompanyName;
		
		private string _ComapanyLocation;
		
		private string _CompanyOwner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnComapanyLocationChanging(string value);
    partial void OnComapanyLocationChanged();
    partial void OnCompanyOwnerChanging(string value);
    partial void OnCompanyOwnerChanged();
    #endregion
		
		public Comapny()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComapanyLocation", DbType="VarChar(50)")]
		public string ComapanyLocation
		{
			get
			{
				return this._ComapanyLocation;
			}
			set
			{
				if ((this._ComapanyLocation != value))
				{
					this.OnComapanyLocationChanging(value);
					this.SendPropertyChanging();
					this._ComapanyLocation = value;
					this.SendPropertyChanged("ComapanyLocation");
					this.OnComapanyLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyOwner", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string CompanyOwner
		{
			get
			{
				return this._CompanyOwner;
			}
			set
			{
				if ((this._CompanyOwner != value))
				{
					this.OnCompanyOwnerChanging(value);
					this.SendPropertyChanging();
					this._CompanyOwner = value;
					this.SendPropertyChanged("CompanyOwner");
					this.OnCompanyOwnerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		private int _ProjectBudget;
		
		private int _ClientID;
		
		private string _StatusID;
		
		private EntitySet<EmployeeProjectMap> _EmployeeProjectMaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnProjectBudgetChanging(int value);
    partial void OnProjectBudgetChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnStatusIDChanging(string value);
    partial void OnStatusIDChanged();
    #endregion
		
		public Project()
		{
			this._EmployeeProjectMaps = new EntitySet<EmployeeProjectMap>(new Action<EmployeeProjectMap>(this.attach_EmployeeProjectMaps), new Action<EmployeeProjectMap>(this.detach_EmployeeProjectMaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectBudget", DbType="Int NOT NULL")]
		public int ProjectBudget
		{
			get
			{
				return this._ProjectBudget;
			}
			set
			{
				if ((this._ProjectBudget != value))
				{
					this.OnProjectBudgetChanging(value);
					this.SendPropertyChanging();
					this._ProjectBudget = value;
					this.SendPropertyChanged("ProjectBudget");
					this.OnProjectBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProjectMap", Storage="_EmployeeProjectMaps", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<EmployeeProjectMap> EmployeeProjectMaps
		{
			get
			{
				return this._EmployeeProjectMaps;
			}
			set
			{
				this._EmployeeProjectMaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjectMaps(EmployeeProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_EmployeeProjectMaps(EmployeeProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Emp_ID;
		
		private string _Emp_Name;
		
		private string _Emp_Address;
		
		private int _Emp_Salary;
		
		private System.Data.Linq.Binary _Emp_HireDate;
		
		private System.Nullable<System.TimeSpan> _Emp_LeaveDate;
		
		private int _Dept_ID;
		
		private EntityRef<Employee> _Employee2;
		
		private EntitySet<EmployeeProjectMap> _EmployeeProjectMaps;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmp_IDChanging(int value);
    partial void OnEmp_IDChanged();
    partial void OnEmp_NameChanging(string value);
    partial void OnEmp_NameChanged();
    partial void OnEmp_AddressChanging(string value);
    partial void OnEmp_AddressChanged();
    partial void OnEmp_SalaryChanging(int value);
    partial void OnEmp_SalaryChanged();
    partial void OnEmp_HireDateChanging(System.Data.Linq.Binary value);
    partial void OnEmp_HireDateChanged();
    partial void OnEmp_LeaveDateChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEmp_LeaveDateChanged();
    partial void OnDept_IDChanging(int value);
    partial void OnDept_IDChanged();
    #endregion
		
		public Employee()
		{
			this._Employee2 = default(EntityRef<Employee>);
			this._EmployeeProjectMaps = new EntitySet<EmployeeProjectMap>(new Action<EmployeeProjectMap>(this.attach_EmployeeProjectMaps), new Action<EmployeeProjectMap>(this.detach_EmployeeProjectMaps));
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Emp_ID
		{
			get
			{
				return this._Emp_ID;
			}
			set
			{
				if ((this._Emp_ID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ID = value;
					this.SendPropertyChanged("Emp_ID");
					this.OnEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Emp_Name
		{
			get
			{
				return this._Emp_Name;
			}
			set
			{
				if ((this._Emp_Name != value))
				{
					this.OnEmp_NameChanging(value);
					this.SendPropertyChanging();
					this._Emp_Name = value;
					this.SendPropertyChanged("Emp_Name");
					this.OnEmp_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_Address", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Emp_Address
		{
			get
			{
				return this._Emp_Address;
			}
			set
			{
				if ((this._Emp_Address != value))
				{
					this.OnEmp_AddressChanging(value);
					this.SendPropertyChanging();
					this._Emp_Address = value;
					this.SendPropertyChanged("Emp_Address");
					this.OnEmp_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_Salary", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Emp_Salary
		{
			get
			{
				return this._Emp_Salary;
			}
			set
			{
				if ((this._Emp_Salary != value))
				{
					this.OnEmp_SalaryChanging(value);
					this.SendPropertyChanging();
					this._Emp_Salary = value;
					this.SendPropertyChanged("Emp_Salary");
					this.OnEmp_SalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_HireDate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Emp_HireDate
		{
			get
			{
				return this._Emp_HireDate;
			}
			set
			{
				if ((this._Emp_HireDate != value))
				{
					this.OnEmp_HireDateChanging(value);
					this.SendPropertyChanging();
					this._Emp_HireDate = value;
					this.SendPropertyChanged("Emp_HireDate");
					this.OnEmp_HireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Emp-LeaveDate]", Storage="_Emp_LeaveDate", DbType="Time", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.TimeSpan> Emp_LeaveDate
		{
			get
			{
				return this._Emp_LeaveDate;
			}
			set
			{
				if ((this._Emp_LeaveDate != value))
				{
					this.OnEmp_LeaveDateChanging(value);
					this.SendPropertyChanging();
					this._Emp_LeaveDate = value;
					this.SendPropertyChanged("Emp_LeaveDate");
					this.OnEmp_LeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_ID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Dept_ID
		{
			get
			{
				return this._Dept_ID;
			}
			set
			{
				if ((this._Dept_ID != value))
				{
					this.OnDept_IDChanging(value);
					this.SendPropertyChanging();
					this._Dept_ID = value;
					this.SendPropertyChanged("Dept_ID");
					this.OnDept_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employee2", ThisKey="Emp_ID", OtherKey="Emp_ID", IsUnique=true, IsForeignKey=false)]
		public Employee Employee2
		{
			get
			{
				return this._Employee2.Entity;
			}
			set
			{
				Employee previousValue = this._Employee2.Entity;
				if (((previousValue != value) 
							|| (this._Employee2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee2.Entity = null;
						previousValue.Employee1 = null;
					}
					this._Employee2.Entity = value;
					if ((value != null))
					{
						value.Employee1 = this;
					}
					this.SendPropertyChanged("Employee2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProjectMap", Storage="_EmployeeProjectMaps", ThisKey="Emp_ID", OtherKey="Emp_ID")]
		public EntitySet<EmployeeProjectMap> EmployeeProjectMaps
		{
			get
			{
				return this._EmployeeProjectMaps;
			}
			set
			{
				this._EmployeeProjectMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employee1", ThisKey="Emp_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Employee2 = null;
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Employee2 = this;
						this._Emp_ID = value.Emp_ID;
					}
					else
					{
						this._Emp_ID = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjectMaps(EmployeeProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeProjectMaps(EmployeeProjectMap entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeProjectMap")]
	public partial class EmployeeProjectMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Emp_ProjectMap_ID;
		
		private int _Emp_ID;
		
		private int _ProjectID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmp_ProjectMap_IDChanging(int value);
    partial void OnEmp_ProjectMap_IDChanged();
    partial void OnEmp_IDChanging(int value);
    partial void OnEmp_IDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public EmployeeProjectMap()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ProjectMap_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Emp_ProjectMap_ID
		{
			get
			{
				return this._Emp_ProjectMap_ID;
			}
			set
			{
				if ((this._Emp_ProjectMap_ID != value))
				{
					this.OnEmp_ProjectMap_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ProjectMap_ID = value;
					this.SendPropertyChanged("Emp_ProjectMap_ID");
					this.OnEmp_ProjectMap_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_ID", DbType="Int NOT NULL")]
		public int Emp_ID
		{
			get
			{
				return this._Emp_ID;
			}
			set
			{
				if ((this._Emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_IDChanging(value);
					this.SendPropertyChanging();
					this._Emp_ID = value;
					this.SendPropertyChanged("Emp_ID");
					this.OnEmp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProjectMap", Storage="_Employee", ThisKey="Emp_ID", OtherKey="Emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeProjectMaps.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjectMaps.Add(this);
						this._Emp_ID = value.Emp_ID;
					}
					else
					{
						this._Emp_ID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProjectMap", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.EmployeeProjectMaps.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjectMaps.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyMaster")]
	public partial class TechnologyMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Tech_ID;
		
		private string _Tech_Name;
		
		private int _Tech_Cost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTech_IDChanging(int value);
    partial void OnTech_IDChanged();
    partial void OnTech_NameChanging(string value);
    partial void OnTech_NameChanged();
    partial void OnTech_CostChanging(int value);
    partial void OnTech_CostChanged();
    #endregion
		
		public TechnologyMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tech_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Tech_ID
		{
			get
			{
				return this._Tech_ID;
			}
			set
			{
				if ((this._Tech_ID != value))
				{
					this.OnTech_IDChanging(value);
					this.SendPropertyChanging();
					this._Tech_ID = value;
					this.SendPropertyChanged("Tech_ID");
					this.OnTech_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tech_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Tech_Name
		{
			get
			{
				return this._Tech_Name;
			}
			set
			{
				if ((this._Tech_Name != value))
				{
					this.OnTech_NameChanging(value);
					this.SendPropertyChanging();
					this._Tech_Name = value;
					this.SendPropertyChanged("Tech_Name");
					this.OnTech_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tech_Cost", DbType="Int NOT NULL")]
		public int Tech_Cost
		{
			get
			{
				return this._Tech_Cost;
			}
			set
			{
				if ((this._Tech_Cost != value))
				{
					this.OnTech_CostChanging(value);
					this.SendPropertyChanging();
					this._Tech_Cost = value;
					this.SendPropertyChanged("Tech_Cost");
					this.OnTech_CostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
